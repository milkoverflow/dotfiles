(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  :namespace "bar"
  (bar_layout))

(defwidget bar_layout []
  (box :class "bar-layout"
    (box :halign "start" :space-evenly false
      (workspaces)
      (pad :content "|")
      (window))
    (box :halign "center")
    (box :halign "end" :space-evenly false
      (volume)
      (pad :content "|")
      (ip)
      (pad :content "|")
      (time)
      (pad :content "|")
      (date)
      (pad :content "|")
      (systray :icon-size 20)
      )))

(defvar time-expand false)
(defpoll time :interval "1s"
    `date +%H:%M:%S`)
(defpoll date :interval "12h" :run-while time-expand
    `date -u '+%A, %Y-%m-%d'`)

(defwidget time []
  (label :text time))
(defwidget date []
  (label :text date))

(deflisten ip
  :initial "?"
  "scripts/ip")

(defwidget ip []
  (label :class "ip" :text "󰓡 ${ip}"))

(defwidget pad [?content] 
  (box :class "pad"
    content))

(deflisten workspaces :initial "[]" "scripts/get-workspaces")
(deflisten current-workspace :initial "1" "scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox
    :onscroll "scripts/scroll-workspaces {} ${current-workspace}"
    :cursor "pointer"
    :class "workspaces"
    (box
      (for workspace in workspaces
        (eventbox
          :onclick "hyprctl dispatch workspace ${workspace.id}"
          :visible "${workspace.id < 6}"
          (box
            :class "workspace-entry${
              workspace.id == current-workspace ? "-current" 
              : workspace.windows == 0 ? "-empty"
              : ""
            }"
            (label :text "${
              workspace.id == current-workspace ||
              workspace.windows > 0
              ? " "
              : " "
            }")))))))

(deflisten window :initial "hyprland" "scripts/get-window-title")
(defwidget window []
  (label :text window))

(deflisten volume :initial '{ "volume": "0", "muted": "false" }' "scripts/listen-volume")
(defwidget volume []
  (eventbox
    :onclick "scripts/volctl cycle"
    :onmiddleclick "scripts/volctl toggle"
    :onscroll "scripts/volctl {}"
    :onrightclick "pavucontrol &"
    :cursor "ew-resize"
    (box
      :class "volume ${volume.muted ? "muted" : ""}"
      (label :text "󰕾 ${volume.volume}"))))


; vim: sw=2
